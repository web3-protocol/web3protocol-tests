name = "Processing contract return"
type = "contractReturnProcessing"


[groups.decode-abi-encoded-bytes]
name = "Decoding of ABI-encoded bytes"
standard = "erc-4804"

[[groups.decode-abi-encoded-bytes.tests]]
name = "ABI-encoded bytes: Basic"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002fa12000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeABIEncodedBytes"
output = "0xfa12"
httpCode = 200
httpHeaders = {}

[[groups.decode-abi-encoded-bytes.tests]]
name = "ABI-encoded bytes: Empty"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeABIEncodedBytes"
output = "0x"
httpCode = 200
httpHeaders = {}

[[groups.decode-abi-encoded-bytes.tests]]
name = "ABI-encoded bytes: Bad ABI-encoding: random data"
contractReturn = "0xa3f130"
contractReturnProcessing = "decodeABIEncodedBytes"
error = { label = "Unable to parse contract output", httpCode = 400 }

[[groups.decode-abi-encoded-bytes.tests]]
name = "ABI-encoded bytes: Bad ABI-encoding: array length too high (0x60 instead of 0x40)"
contractReturn = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
contractReturnProcessing = "decodeABIEncodedBytes"
error = { label = "Unable to parse contract output", httpCode = 400 }

[[groups.decode-abi-encoded-bytes.tests]]
name = "ABI-encoded bytes: MIME type is provided"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002fa12000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"
output = "0xfa12"
httpCode = 200
httpHeaders = {"Content-Type" = "image/svg+xml"}



[groups.raw-bytes-json-encoded]
name = "Raw bytes json encoded"
standard = "erc-4804"

[[groups.raw-bytes-json-encoded.tests]]
name = "JSON encoding of raw bytes: basic"
contractReturn = "0x5612fa"
contractReturnProcessing = "jsonEncodeRawBytes"
outputAsString = "[\"0x5612fa\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.raw-bytes-json-encoded.tests]]
name = "JSON encoding of raw bytes: empty"
contractReturn = "0x"
contractReturnProcessing = "jsonEncodeRawBytes"
outputAsString = "[\"0x\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}



[groups.json-encode-values]
name = "JSON encode values"
standard = "erc-4804"

[[groups.json-encode-values.tests]]
name = "JSON encode values: bytes: In string with 0x prefix"
contractReturn = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000014200000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "bytes"}]
outputAsString = "[\"0x42\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: bytes32: In string with 0x prefix"
contractReturn = "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "bytes32"}]
outputAsString = "[\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: bytes32: In string"
contractReturn = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000066168616861680000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "string"}]
outputAsString = "[\"ahahah\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: address: In string with 0x prefix"
contractReturn = "0x000000000000000000000000ca300b47c9e75a2a3a0bd3295137341e809b504e"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "address"}]
outputAsString = "[\"0xCa300B47C9E75a2A3a0bd3295137341E809B504E\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: uint256: In string"
contractReturn = "0x000000000000000000000000000000000000000000000000000000000000002a"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "uint256"}]
outputAsString = "[\"42\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: array"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "uint256[]"}]
outputAsString = "[[\"42\",\"24\"]]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: multiple values"
contractReturn = "0x000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000014200000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "uint256"}, {type = "bytes"}]
outputAsString = "[\"42\",\"0x42\"]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}

[[groups.json-encode-values.tests]]
name = "JSON encode values: No values"
contractReturn = "0x"
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = []
outputAsString = "[]"
httpCode = 200
httpHeaders = {"Content-Type" = "application/json"}



[groups.decode-erc5219-request]
name = "Decode ERC5219 Request"
standard = "erc-6944"

[[groups.decode-erc5219-request.tests]]
name = "Sample html return with 1 header"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001f3c68746d6c3e3c626f64793e48656c6c6f3c2f626f64793e3c2f68746d6c3e000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c436f6e74656e742d7479706500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009746578742f68746d6c0000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeErc5219Request"
outputAsString = "<html><body>Hello</body></html>"
httpCode = 200
httpHeaders = {"Content-type" = "text/html"}

[[groups.decode-erc5219-request.tests]]
name = "Sample json return with 2 headers"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000045b34325d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c436f6e74656e742d74797065000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106170706c69636174696f6e2f6a736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000006582d74657374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037878780000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeErc5219Request"
outputAsString = "[42]"
httpCode = 200
httpHeaders = {"Content-type" = "application/json", "X-test" = "xxx"}

[[groups.decode-erc5219-request.tests]]
name = "Sample 404 html"
contractReturn = "0x0000000000000000000000000000000000000000000000000000000000000194000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001d3c68746d6c3e3c626f64793e3430343c2f626f64793e3c2f68746d6c3e0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c436f6e74656e742d7479706500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009746578742f68746d6c0000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeErc5219Request"
outputAsString = "<html><body>404</body></html>"
httpCode = 404
httpHeaders = {"Content-type" = "text/html"}

[[groups.decode-erc5219-request.tests]]
name = "Binary PNG file"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000006789504e470d0a1a0a0000000d494844520000010000000100010300000066bc3a2500000003504c5445aad3dfcfecbcf50000001f494441546881edc1010d000000c2a0f74f6d0e37a00000000000000000be0d210000019a60e1d50000000049454e44ae426082000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c436f6e74656e742d7479706500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009696d6167652f706e670000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeErc5219Request"
output = "0x89504e470d0a1a0a0000000d494844520000010000000100010300000066bc3a2500000003504c5445aad3dfcfecbcf50000001f494441546881edc1010d000000c2a0f74f6d0e37a00000000000000000be0d210000019a60e1d50000000049454e44ae426082"
httpCode = 200
httpHeaders = {"Content-type" = "image/png"}

[[groups.decode-erc5219-request.tests]]
name = "Random binary data with leading and trailing zeroes"
contractReturn = "0x00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000500004200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeErc5219Request"
output = "0x0000420000"
httpCode = 200
httpHeaders = {}

[[groups.decode-erc5219-request.tests]]
name = "Empty data"
contractReturn = "00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
contractReturnProcessing = "decodeErc5219Request"
output = "0x"
httpCode = 200
httpHeaders = {}

[[groups.decode-erc5219-request.tests]]
name = "Invalid ABI return arguments (1 instead of 3)"
contractReturn = "0000000000000000000000000000000000000000000000000000000000000015"
contractReturnProcessing = "decodeErc5219Request"
error = { label = "Unable to parse contract output", httpCode = 400 }

