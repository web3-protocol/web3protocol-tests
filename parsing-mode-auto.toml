name = "Parsing auto mode URLs"
type = "urlParsing"


[groups.root]
name = "Root directory"
standards = ["ERC-4804", "ERC-6860"]

[[groups.root.tests]]
name = "Without \"/\" specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56"
resolveMode = "auto"
contractCallMode = "calldata"
calldata = "0x"
contractReturnProcessing = "decodeABIEncodedBytes"

[[groups.root.tests]]
name = "With \"/\" specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/"
resolveMode = "auto"
contractCallMode = "calldata"
calldata = "0x"
contractReturnProcessing = "decodeABIEncodedBytes"



[groups.methods]
name = "Methods"
standards = ["ERC-4804", "ERC-6860"]

[[groups.methods.tests]]
name = "Valid method name"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"

[[groups.methods.tests]]
name = "Invalid method name: number in front"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/3tokenHTML"
error = { label = "Invalid method name", httpCode = 400 }

[[groups.methods.tests]]
name = "Invalid method name: invalid char"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHT*ML"
error = { label = "Invalid method name", httpCode = 400 }



[groups.argument-types]
name = "Argument types"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-types.tests]]
name = "Non existing type"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/xoxo!1"
error = { label = "Unknown type: xoxo", httpCode = 400 }



[groups.argument-uint256]
name = "uint256 argument handling"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-uint256.tests]]
name = "Type specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint256!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 1}]

[[groups.argument-uint256.tests]]
name = "Type specified: Bad value (invalid number)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint256!1n"
error = { label = "Argument is not a number: 1n", httpCode = 400 }

[[groups.argument-uint256.tests]]
name = "Type specified: Bad value (value with decimal)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint256!1.2"
error = { label = "Argument is not a number: 1.2", httpCode = 400 }

[[groups.argument-uint256.tests]]
name = "Type specified: Bad value (negative number)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint256!-1"
error = { label = "Number is negative: -1", httpCode = 400 }

[[groups.argument-uint256.tests]]
name = "Autodetection"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 1}]

[[groups.argument-uint256.tests]]
name = "Autodetection: Bad value (negative number)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/-1"
error = { label = "Unrecognized domain name", httpCode = 400 }



[groups.argument-bytes32]
name = "bytes32 argument handling"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-bytes32.tests]]
name = "Type specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes32!0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f481"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bytes32"}]
methodArgValues = [{value = "0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f481"}]

[[groups.argument-bytes32.tests]]
name = "Bad value"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes32!0x59f7"
error = { label = "Argument has not the correct length: 0x59f7", httpCode = 400 }

[[groups.argument-bytes32.tests]]
name = "Bad hexadecimal"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes32!0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f48g"
error = { label = "Argument is not a valid hex string: 0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f48g", httpCode = 400 }

[[groups.argument-bytes32.tests]]
name = "Autodetection"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f481"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bytes32"}]
methodArgValues = [{value = "0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f481"}]



[groups.argument-address]
name = "address argument handling"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-address.tests]]
name = "Type specified"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/address!0xcEe284F754E854890e311e3280b767F80797180d"
resolveMode = "auto"
contractCallMode = "method"
methodName = "balanceOf"
methodArgs = [{type = "address"}]
methodArgValues = [{value = "0xcEe284F754E854890e311e3280b767F80797180d"}]

[[groups.argument-address.tests]]
name = "Bad value : bad hexadecimal"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/address!0xcEe284F754E854890e311e3280b767F80797180g"
error = { label = "Unrecognized domain name", httpCode = 400 }

[[groups.argument-address.tests]]
name = "Bad value : invalid length"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/address!0xcEe284F754E854890e311e3280b767F80797180da"
error = { label = "Unrecognized domain name", httpCode = 400 }

[[groups.argument-address.tests]]
name = "Type specified, domain name version"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/address!uniswap.eth"
resolveMode = "auto"
contractCallMode = "method"
methodName = "balanceOf"
methodArgs = [{type = "address"}]
methodArgValues = [{value = "0x1a9C8182C09F50C8318d769245beA52c32BE35BC"}]

[[groups.argument-address.tests]]
name = "Type specified, domain name version: Non existing domain"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/address!uniswapxxxxxxxxxxxxxx.eth"
error = { label = "Cannot resolve domain name", httpCode = 404 }

[[groups.argument-address.tests]]
name = "Type specified, domain name version: Non existing domain name provider"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/address!uniswap.abcd"
error = { label = "Unsupported domain name suffix: abcd", httpCode = 400 }

[[groups.argument-address.tests]]
name = "Autodetection"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/0xcEe284F754E854890e311e3280b767F80797180d"
resolveMode = "auto"
contractCallMode = "method"
methodName = "balanceOf"
methodArgs = [{type = "address"}]
methodArgValues = [{value = "0xcEe284F754E854890e311e3280b767F80797180d"}]

[[groups.argument-address.tests]]
name = "Autodetection, domain name version"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/uniswap.eth"
resolveMode = "auto"
contractCallMode = "method"
methodName = "balanceOf"
methodArgs = [{type = "address"}]
methodArgValues = [{value = "0x1a9C8182C09F50C8318d769245beA52c32BE35BC"}]

[[groups.argument-address.tests]]
name = "Autodetection, domain name version: Non existing domain"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/uniswapxxxxxxxxxxxxxxxxx.eth"
error = { label = "Cannot resolve domain name", httpCode = 404 }

[[groups.argument-address.tests]]
name = "Autodetection, domain name version: Non existing domain name provider"
url = "web3://0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/balanceOf/uniswap.abcd"
error = { label = "Unsupported domain name suffix: abcd", httpCode = 400 }



[groups.argument-bytes]
name = "bytes argument handling"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-bytes.tests]]
name = "Type specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes!0x4578457f"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bytes"}]
methodArgValues = [{value = "0x4578457f"}]

[[groups.argument-bytes.tests]]
name = "Type specified : Bad value (not starting by 0x)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes!4578457C"
error = { label = "Argument is not a valid hex string: 4578457C", httpCode = 400 }

[[groups.argument-bytes.tests]]
name = "Type specified : Bad value (Uneven number of chars)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes!0x47C"
error = { label = "Argument is not a valid hex string: 0x47C", httpCode = 400 }

[[groups.argument-bytes.tests]]
name = "Type specified : Bad value (Invalid hexa chars)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes!0x47fg"
error = { label = "Argument is not a valid hex string: 0x47fg", httpCode = 400 }

[[groups.argument-bytes.tests]]
name = "Autodetection"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/0x4578457f"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bytes"}]
methodArgValues = [{value = "0x4578457f"}]



[groups.argument-string]
name = "string argument handling"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-string.tests]]
name = "Base"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!1234"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "1234"}]

[[groups.argument-string.tests]]
name = "URI-percent-encoding of special chars: !/?%"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!%21%2F%3F%25"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "!/?%"}]

[[groups.argument-string.tests]]
name = "URI-percent-encoding of utf-8 chars"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!%F0%9F%99%82"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "🙂"}]

[[groups.argument-string.tests]]
name = "Explicit casting of address"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!0xcEe284F754E854890e311e3280b767F80797180d"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "0xcEe284F754E854890e311e3280b767F80797180d"}]



# ERC+6860 add support for uint and all uint<X>
[groups.argument-uint]
name = "uint and uint <X> argument types"
standards = ["ERC-6860"]

[[groups.argument-uint.tests]]
name = "Type specified: uint (alias of uint256)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 1}]

[[groups.argument-uint.tests]]
name = "Type specified: uint8"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint8!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint8"}]
methodArgValues = [{value = 1}]

[[groups.argument-uint.tests]]
name = "Type specified: uint16"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint16!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint16"}]
methodArgValues = [{value = 1}]

[[groups.argument-uint.tests]]
name = "Type specified: uint248"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint248!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint248"}]
methodArgValues = [{value = 1}]

[[groups.argument-uint.tests]]
name = "Bad type specified: uint7"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint7!1"
error = { label = "Invalid argument type: uint7", httpCode = 400 }

[[groups.argument-uint.tests]]
name = "Bad type specified: uint255"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint255!1"
error = { label = "Invalid argument type: uint255", httpCode = 400 }

[[groups.argument-uint.tests]]
name = "Bad type specified: uint264"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/uint264!1"
error = { label = "Invalid argument type: uint264", httpCode = 400 }



# ERC+6860 add support for int and all int<X>
[groups.argument-int]
name = "int and int<X> argument types"
standards = ["ERC-6860"]

[[groups.argument-uint.tests]]
name = "Type specified: int (alias of int256)"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "int256"}]
methodArgValues = [{value = 1}]

[[groups.argument-int.tests]]
name = "Type specified: int8"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int8!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "int8"}]
methodArgValues = [{value = 1}]

[[groups.argument-int.tests]]
name = "Type specified: int16"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int16!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "int16"}]
methodArgValues = [{value = 1}]

[[groups.argument-int.tests]]
name = "Type specified: int248"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int248!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "int248"}]
methodArgValues = [{value = 1}]

[[groups.argument-int.tests]]
name = "Bad type specified: int7"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int7!1"
error = { label = "Invalid argument type: int7", httpCode = 400 }

[[groups.argument-int.tests]]
name = "Bad type specified: int255"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int255!1"
error = { label = "Invalid argument type: int255", httpCode = 400 }

[[groups.argument-int.tests]]
name = "Bad type specified: int264"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int264!1"
error = { label = "Invalid argument type: int264", httpCode = 400 }

[[groups.argument-int.tests]]
name = "Negative value allowed"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/int256!-1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "int256"}]
methodArgValues = [{value = -1}]



# ERC+6860 add support for all bytes<X>
[groups.argument-bytesx]
name = "bytes<X> argument types"
standards = ["ERC-6860"]

[[groups.argument-bytesx.tests]]
name = "Type specified: bytes1"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes1!0x01"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bytes1"}]
methodArgValues = [{value = "0x01"}]

[[groups.argument-bytesx.tests]]
name = "Type specified: bytes31"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes31!0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f4"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bytes31"}]
methodArgValues = [{value = "0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f4"}]

[[groups.argument-bytesx.tests]]
name = "Bad type specified: bytes33"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes33!0x59f71cd7bbfece3b03f2545253083c3c4da78a52913390a9c05c13ccc013f4ad"
error = { label = "Invalid argument type: bytes33", httpCode = 400 }

[[groups.argument-bytesx.tests]]
name = "Bad data length with bytes1"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bytes1!0x0001"
error = { label = "Argument has not the correct length: 0x0001", httpCode = 400 }



# ERC+6860 add support for bool
[groups.argument-bool]
name = "bool argument type"
standards = ["ERC-6860"]

[[groups.argument-bool.tests]]
name = "Type specified, with true value"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bool!true"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bool"}]
methodArgValues = [{value = true}]

[[groups.argument-bool.tests]]
name = "Type specified, with false value"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bool!false"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bool"}]
methodArgValues = [{value = false}]

[[groups.argument-bool.tests]]
name = "Bad value"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/bool!1"
error = { label = "Argument must be 'true' or 'false'", httpCode = 400 }

[[groups.argument-bool.tests]]
name = "Autodetection: true"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/true"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bool"}]
methodArgValues = [{value = true}]

[[groups.argument-bool.tests]]
name = "Autodetection: false"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/false"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "bool"}]
methodArgValues = [{value = false}]



[groups.argument-multiple]
name = "Multiple arguments"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-multiple.tests]]
name = "Specified types"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!1234/uint256!2"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}, {type = "uint256"}]
methodArgValues = [{value = "1234"}, {value = 2}]

[[groups.argument-multiple.tests]]
name = "Autodetected types"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1234/uniswap.eth/0xabcdef"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}, {type = "address"}, {type = "bytes"}]
methodArgValues = [{value = 1234}, {value = "0x1a9C8182C09F50C8318d769245beA52c32BE35BC"}, {value = "0xabcdef"}]


[groups.argument-percent-encoding]
name = "Argument percent encoding"
standards = ["ERC-4804", "ERC-6860"]

[[groups.argument-percent-encoding.tests]]
name = "Percent encoding of value"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!%e5%b8%81"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "币"}]

[[groups.argument-percent-encoding.tests]]
name = "Percent encoding of value with ! inside"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string!a%21b"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "a!b"}]

[[groups.argument-percent-encoding.tests]]
name = "Percent encoding of separator and value"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/string%21a%21b"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "a!b"}]


[groups.mime-type]
name = "MIME Type handling"
standards = ["ERC-4804", "ERC-6860"]

[[groups.mime-type.tests]]
name = "No extension specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/string!1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "1"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = ""

[[groups.mime-type.tests]]
name = "Extension specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/string!1.svg"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "1.svg"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"

[[groups.mime-type.tests]]
name = "Unknown extension specified"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/string!1.ploua"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "1.ploua"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = ""

[[groups.mime-type.tests]]
name = "Extension specified with multiple args"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31/string!1.svg"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}, {type = "string"}]
methodArgValues = [{value = 31}, {value = "1.svg"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"

[[groups.mime-type.tests]]
name = "Extension specified with no args"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/token.svg"
error = { label = "Invalid method name", httpCode = 400 }



[groups.return-types]
name = "Return types"
standards = ["ERC-4804", "ERC-6860"]

[[groups.return-types.tests]]
name = "No ?returns"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 1}]
contractReturnProcessing = "decodeABIEncodedBytes"

[[groups.return-types.tests]]
name = "?returns=()"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1?returns=()"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 1}]
contractReturnProcessing = "jsonEncodeRawBytes"

[[groups.return-types.tests]]
name = "?returnTypes=()"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1?returnTypes=()"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 1}]
contractReturnProcessing = "jsonEncodeRawBytes"

[[groups.return-types.tests]]
name = "?returns with one type"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256)"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256'}]

[[groups.return-types.tests]]
name = "?returns= twice: Last taken"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1?returns=()&returns=(uint256)"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = []
methodArgValues = []
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256'}]

[[groups.return-types.tests]]
name = "?returns= and ?returnTypes=: Last taken"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenHTML/1?returns=()&returnTypes=(uint256)"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenHTML"
methodArgs = []
methodArgValues = []
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256'}]

[[groups.return-types.tests]]
name = "?returns with one array of a type"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256[])"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256[]'}]

[[groups.return-types.tests]]
name = "?returns with one fixed-size array of a type"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256[2])"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256[2]'}]

[[groups.return-types.tests]]
name = "?returns with one tuple"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=((string,uint256))"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "tuple", components = [{type = "string"}, {type = "uint256"}]}]

[[groups.return-types.tests]]
name = "?returns with one tuple containing a tuple"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(((string,uint256)))"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "tuple", components = [{type = "tuple", components = [{type = "string"}, {type = "uint256"}]}]}]

[[groups.return-types.tests]]
name = "?returns with one array of tuple"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=((string,uint256)[])"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "tuple[]", components = [{type = "string"}, {type = "uint256"}]}]

[[groups.return-types.tests]]
name = "?returns with one fixed-size array of tuple"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=((string,uint256)[2])"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "tuple[2]", components = [{type = "string"}, {type = "uint256"}]}]

[[groups.return-types.tests]]
name = "?returns with one tuple of an array of tuple"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(((string,uint256)[]))"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = "tuple", components = [{type = "tuple[]", components = [{type = "string"}, {type = "uint256"}]}]}]

[[groups.return-types.tests]]
name = "?returns with multiple types"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256,uint256,bytes)"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256'}, {type = 'uint256'}, {type = 'bytes'}]

[[groups.return-types.tests]]
name = "?returns with multiple types, arrays and typles"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256,(uint256,(bytes,string)[4]),string[])"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "uint256"}]
methodArgValues = [{value = 2}, {value = 50}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256'}, {type = "tuple", components = [{type = "uint256"}, {type = "tuple[4]", components = [{type = "bytes"}, {type = "string"}]}]}, {type = 'string[]'}]

[[groups.return-types.tests]]
name = "?returns with an invalid type"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256,abcd)"
error = { label = "Return attribute: Invalid type: abcd", httpCode = 400 }

[[groups.return-types.tests]]
name = "?returns with an invalid empty type"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/50?returns=(uint256,)"
error = { label = "Return attribute: missing type", httpCode = 400 }

[[groups.return-types.tests]]
name = "?returns with types: file extension in argument to be ignored"
url = "web3://0xA5aFC9fE76a28fB12C60954Ed6e2e5f8ceF64Ff2/levelAndTile/2/string!50.svg?returns=(uint256,uint256)"
resolveMode = "auto"
contractCallMode = "method"
methodName = "levelAndTile"
methodArgs = [{type = "uint256"}, {type = "string"}]
methodArgValues = [{value = 2}, {value = "50.svg"}]
contractReturnProcessing = "jsonEncodeValues"
jsonEncodedValueTypes = [{type = 'uint256'}, {type = 'uint256'}]



[groups.mime-type-override]
name = "MIME type override"
standards = ["ERC-7087"]

[[groups.mime-type-override.tests]]
name = "mime.content"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31?mime.content=image/svg%2Bxml"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 31}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"

[[groups.mime-type-override.tests]]
name = "mime.type"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31?mime.type=svg"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 31}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"

[[groups.mime-type-override.tests]]
name = "Use of several mime.type : last one used"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31?mime.type=html&mime.type=svg"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 31}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"

[[groups.mime-type-override.tests]]
name = "Use of mime.type and mime.content : last one used"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31?mime.content=text/html&mime.type=svg"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 31}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"

[[groups.mime-type-override.tests]]
name = "mime.type if ?returns= is present: ignored"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31?returns=()&mime.type=svg"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 31}]
contractReturnProcessing = "jsonEncodeRawBytes"
decodedABIEncodedBytesMimeType = ""

[[groups.mime-type-override.tests]]
name = "mime.content if ?returns= is present: ignored"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/31?returns=()&mime.content=image/png"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "uint256"}]
methodArgValues = [{value = 31}]
contractReturnProcessing = "jsonEncodeRawBytes"
decodedABIEncodedBytesMimeType = ""

[[groups.mime-type-override.tests]]
name = "mime.type present: file extension of last argument ignored"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/string!31.svg?mime.type=png"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "31.svg"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/png"

[[groups.mime-type-override.tests]]
name = "mime.content present: file extension of last argument ignored"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/string!31.svg?mime.content=image/png"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "31.svg"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/png"

[[groups.mime-type-override.tests]]
name = "mime.type present: ignored if cannot be found"
url = "web3://0x4e1f41613c9084fdb9e34e11fae9412427480e56/tokenSVG/string!31.svg?mime.type=foo"
resolveMode = "auto"
contractCallMode = "method"
methodName = "tokenSVG"
methodArgs = [{type = "string"}]
methodArgValues = [{value = "31.svg"}]
contractReturnProcessing = "decodeABIEncodedBytes"
decodedABIEncodedBytesMimeType = "image/svg+xml"
